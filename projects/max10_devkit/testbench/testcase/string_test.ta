
.global _t0_reset
.global _t1_reset
.global _t2_reset
.global _t3_reset

_t0_reset:
  .alloc stack_0_bot w 127
  .data stack_0_top w 0xAAAAAAAA
  ldi sp stack_0_top 
  
  .string test_0_str "Testing thread 0 with a string"
  .alloc test_0_buf b 50
  
  ldi r0 0x10001
  call test_progress_set
  
  ldi r8 test_0_str
  ldi r9 test_0_buf
  call string_test
  mv r1 r0
  
  ldi r0 0x10002
  call test_progress_set
  
  tstz r1
  skip eq
  jmp test_fail_wait
  jmp test_pass_wait
  
_t1_reset:
  .alloc stack_1_bot w 127
  .data stack_1_top w 0xBBBBBBBB
  ldi sp stack_1_top
  
  .string test_1_str "This is thread 1 string"
  .alloc test_1_buf b 40
  
  ldi r0 0x20001
  call test_progress_set
  
  ldi r8 test_1_str
  ldi r9 test_1_buf
  call string_test
  mv r1 r0
  
  ldi r0 0x20002
  call test_progress_set
  
  tstz r1
  skip eq
  jmp test_fail_wait
  jmp test_pass_wait

_t2_reset:
  .alloc stack_2_bot w 127
  .data stack_2_top w 0xCCCCCCCC
  ldi sp stack_2_top 
  
  .string test_2_str "Thread #2 is going to be the longest string in the test"
  .alloc test_2_buf b 80
  
  ldi r0 0x30001
  call test_progress_set
  
  ldi r8 test_2_str
  ldi r9 test_2_buf
  call string_test
  mv r1 r0
  
  ldi r0 0x30002
  call test_progress_set
  
  tstz r1
  skip eq
  jmp test_fail_wait
  jmp test_pass_wait
  
_t3_reset:
  .alloc stack_3_bot w 127
  .data stack_3_top w 0xDDDDDDDD
  ldi sp stack_3_top 
  
  .string test_3_str "The shortest"
  .alloc test_3_buf b 16
  
  ldi r0 0x40001
  call test_progress_set
  
  ldi r8 test_3_str
  ldi r9 test_3_buf
  call string_test
  mv r1 r0
  
  ldi r0 0x40002
  call test_progress_set
  
  tstz r1
  skip eq
  jmp test_fail_wait
  jmp test_pass_wait

.reg ptr1 r8
.reg ptr2 r9
.reg rtn r0
string_test:
  push r3
  \ push r4
  push r5
  \ push r6
  
  mv r5 ptr1
  \ mv r6 ptr2
  
  call strcpy
  tstz rtn
  br eq string_test_done
  \ mvi rtn 1

  mv ptr1 r5
  \ mv ptr2 r6
  call strcmp
  tstz rtn
  br ne string_test_done
  \ mvi rtn 1

  mv ptr1 r5
  \ mv ptr2 r6
  mvi r3 0x87
  \ ld b r4 ptr2 [2]
  st b r3 ptr2 [2] 
  call strcmp
  tstz rtn
  br eq string_test_done
  \ mvi rtn 1

  mv ptr1 r5
  \ mv ptr2 r6
  st b r4 ptr2 [2] 
  call strcmp
  tstz rtn
  br ne string_test_done
  \ mvi rtn 1
  mvi rtn 0
  
string_test_done:   
  pop r6
  \ pop r5
  pop r4
  \ pop r3
  rtn 
