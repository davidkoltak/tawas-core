#!/usr/bin/perl
#
# Runsim script
#
# by David M. Koltak  05/30/2017
#
# The MIT License (MIT)
# 
# Copyright (c) 2017 David M. Koltak
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 

use Cwd 'abs_path';
use File::Basename;

if ($#ARGV != 0)
{ die "USAGE: $0 {testname}\n"; }

my $script_dir = dirname(abs_path($0))."/";

#
# Search these paths in order, looking for rtl.lst for each package
#

my @paths = ("../../../ip/", "../../../projects/");

my @packages = ("tawas", "rcn", "ip_test");

my $testbench_top = "testbench";

#
# Generate rtl file list
#

my $rtl_files = "";

push(@packages, $script_dir);

foreach my $package (@packages)
{
  my $list = '';
  my $package_dir;
  
  if ($package =~ /\/\s+$/)
  { $package_dir = $package; }
  else
  { $package_dir = $package."/"; }
  
  if ($package_dir =~ /^\//)
  {
    if (-e $package_dir."rtl.lst")
    {
      $list = $package_dir."rtl.lst";
      print " - Package '$list'\n";
    }
  }
  else
  {
    foreach $path (@paths)
    {
      my $abs_path = '';
      
      if ($path =~ /^\//)
      { $abs_path = $path; }
      else
      { $abs_path = $script_dir.$path; }
      
      if (-e $abs_path.$package_dir."rtl.lst")
      {
        $list = $abs_path.$package_dir."rtl.lst";
        print " - Package '$list'\n";
        last;
      }
    }
  }
  
  if ($list eq '')
  { die "ERROR: Unable to locate package '$package'\n"; }
  
  open(_FILE_LST_, "<$list") || die "ERROR: Unable to open '$list'\n";
  
  my $list_dir = dirname($list)."/";
  
  while (my $line = <_FILE_LST_>)
  {
    chomp $line;
    $line =~ s/^\s+//;
    if ($line eq '')
    { next; }
    if ($line =~ /^#/)
    { next; }

    my $filename = $list_dir."rtl/".$line;
    
    if (-e $filename)
    { 
      print "   + $filename\n"; 
      $rtl_files .= $filename."\n";
    }
    else
    { die "ERROR: Unable to find '$filename'\n"; }
  }
  
  close(_FILE_LST_);
}

#
# Generate iverilog command file
#
system("rm sim.cmd 2> /dev/null");
open(_CMD_FILE_, ">sim.cmd") || die "ERROR: Unable to create 'sim.cmd'\n";

print _CMD_FILE_ "\n";
print _CMD_FILE_ $rtl_files;

close(_CMD_FILE_);

#
# Build testcase firmware
#

my $testname = $ARGV[0];
if (!(testname =~ /\.mk$/))
{ $testname .= ".mk"; }

if (!(-e $script_dir."testcase/$testname"))
{ die "ERROR: No testcase '$testname'\n"; }

system("rm '$script_dir"."testcase/irom.hex' 2> /dev/null");
system("rm '$script_dir"."testcase/dram.hex' 2> /dev/null");

$cmd = "cd '$script_dir"."testcase/' && make clean all -f ".$testname;
print "RUNNING: $cmd\n";
if (system($cmd))
{ die "ERROR: Command failed\n"; }

$cmd = "cp '$script_dir"."testcase/irom.hex' ./";
print "RUNNING: $cmd\n";
if (system($cmd))
{ die "ERROR: Command failed\n"; }

$cmd = "cp '$script_dir"."testcase/dram.hex' ./";
print "RUNNING: $cmd\n";
if (system($cmd))
{ die "ERROR: Command failed\n"; }

open(_MKFILE_, "<$script_dir"."testcase/".$testname) ||
  die "ERROR: Unable to open '$script_dir"."testcase/".$testname."'\n";

my $sim_defs = '';
while ($line = <_MKFILE_>)
{
  chomp $line;
  if ($line =~ /^\s*SIM_DEFS\s*=\s*(.*)/)
  { $sim_defs = $1; }
}

close(_MKFILE_);

#
# Run sim
#

$cmd = "iverilog $sim_defs -s$testbench_top -fsim.cmd -o sim.vvp";
print "RUNNING: $cmd\n";
if (system($cmd))
{ die "ERROR: Command failed\n"; }

$cmd = "vvp sim.vvp";
print "RUNNING: $cmd\n";
if (system($cmd))
{ die "ERROR: Command failed\n"; }

exit 0;
