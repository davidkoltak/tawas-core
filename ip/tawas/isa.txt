/* SPDX-License-Identifier: MIT */
/* (c) Copyright 2018 David M. Koltak, all rights reserved. */

//
// Tawas Instruction Set Architecture (ISA)
//
// - Notes on instruction set and machine instruction binary format
//

Symetrical Quad-threaded (25% clocks each)
 - Hides IROM fetch latency and pipeline delays
 - Chose this over pipeline stalls because of better IPC
 - Chose this over branch delay slot because of easier programming
 - Reduced single thread performance, so need to keep all threads busy
 - Also provides natural TX/RX, Read/Write, or Consumer/Producer thread separation
 - All threads share same IROM, but start at different offsets

Each thread has 8 x 32-bit registers. With four threads, a core contains 32 x 32-bit
registers. All registers can be used in AU operations, but there are limitation 
for bus load/store commands.

The r7 register is used as call/rtn link, and r6 is inferred as the stack
pointer for all push/pop insructions.

Dedicated Instruction and Local Data busses.  Connects to system through 
an "RCN Bus", a 32-bit ring style multi-master bus.

32-bit instruction words formated as follows...
___________________________________________

00    [AU OP]    [AU_OP]    - Series AU Ops
01    [LS_OP]    [LS_OP]    - Series LS Ops
10    [LS_OP]    [AU_OP]    - Parallel LS/AU Ops
1100  [BR_OP]    [AU_OP]    - Parallel BR/AU Ops
1101  [BR_OP]    [LS_OP]    - Parallel BR/LS Ops
1110       [IMM_LD]         - Load 25-bit signed extended immediate to register
11110      [DIR_LD]         - Load/store a 32-bit register using 25-bit address
1111100 - RSVD 25 BIT -
1111101 - RSVD 25 BIT -
1111110 - RSVD 25 BIT -
1111111    [CALL_OP]        - Call/Jmp


AU Opcodes: 15-bits
------------------------------------------

00 iii ccc bbb aaa

  0 : Or       (a | b) -> c  (aka nop, mv)
  1 : And      (a & b) -> c
  2 : Xor      (a ^ b) -> c  (aka clr a)
  3 : Add      (a + b) -> c
  4 : Sub      (a - b) -> c
  5 : 
  6 : 
  7 : 

01000 iiii aaa bbb

  0 : Not      (~b) -> a
  1 : Neg      (-b) -> a
  2 : Cmp      (a - b)
  3 :
  4 :
  5 :
  6 :
  7 : 
  
  8 :
  9 :
  A :
  B :
  C :
  D : version  (version) -> a
  E : thread   (thread) -> a
  F : tick     (tick) -> a
  
0101 iii vvvvv aaa

  0 : bset     (a | (1 << #v) -> a
  1 : bclr     (a & ~(1 << #v) -> a
  2 : btst     (a & (1 << #v)
  3 :
  4 : lsl      (a << #v) -> a
  5 : lsr      (a >> #v) -> a
  6 : asr      (a >> #v) -> a
  7 : sx       sign-extend(a, bit(v)) -> a
  
011 iiiiiiiii  aaa : cmpi a, [-256, 255]
10 iiiiiiiiii  aaa : addi a, [-512, 511]
11 iiiiiiiiii  aaa : mvi a, [-512, 511]

LS Opcodes: 15-bits
------------------------------------------

00 tt iiiii ppp ddd  : Load  (type) p[i] -> d  (ld.t rx, p[i])
01 tt iiiii ppp ddd                            (ld.t rx, p++/--i)

10 tt iiiii ppp ddd  : Store (type) d -> p[i]  (st.t rx, p[i])
11 tt iiiii ppp ddd                            (st.t rx, p++/--i)

 TYPE
 -----------
 00 : 8-bit
 01 : 16-bit
 10 : 32-bit
 11 : 32-bit (posted)

NOTE: Pre-decrement, Post-increment

st.w rx, r6--1  == push rx
ld.w rx, r6++1  == pop rx


BR Opcodes: 13-bits
------------------------------------------

0 iiii iiii iiii  : br -2048,2047 words
0 0000 0000 0000  : halt (when used with AU nop)
0 0000 0000 0001  : br_nop (aka, unconditional goto next instruction)
1 xxxx 0000 0001  : jmpi (r7->pc)
1 cccc iiii iiii  : br.cc -128,127 words
1 cccc 0000 0010  : skip.cc (skip next instruction)

NOTE: 'rtn' implemented as parallel 'jmpi' and 'pop r7'

Imm Load: 28-bits (ldi)
------------------------------------------

rrr e eeeeeeee eeeeeeee eeeeeeee : Store signed extended 25-bit value
                                  into Rx
                                 
Direct Load: 27-bits (ldd/std)
------------------------------------------

0 rrr a aaaaaaaa aaaaaaaa aaaaaa : Load Rx with 32-bit value at sx{a{22:0}, 2'b00}
1 rrr a aaaaaaaa aaaaaaaa aaaaaa : Store Rx 32-bit value to sx{a{22:0}, 2'b00}


Call Opcodes: 26-bits
------------------------------------------

0 eeeeeeee eeeeeeee eeeeeeee : jmp e (e->pc)
1 eeeeeeee eeeeeeee eeeeeeee : call e (e->pc, pc->r7, push(r7))


ASM Instructions
------------------------------------------

[directives]
   
.alloc label {b|h|w} {count}
.data label {b|h|w} {data} ...
.string label "string"
.global label
.equ label (expr)
.reg name {rX}

[opcodes]

jmp label
call label
rtn
jmpi

ldi imm25
ldd rx label
std rx label

br label
br cond label
skip cond

ld {b|h|w|post} rx ry #
ld {b|h|w|post} rx ry ++/--#
st {b|h|w|post} rx ry #
st {b|h|w|post} rx ry ++/--#

push rx
pop rx

mvi ra imm10
cmpi ra imm9
addi ra imm10
inc ra
dec ra

add rc ra rb
sub rc ra rb
or rc ra rb
and rc ra rb
xor rc ra rb

add ra rb
sub ra rb
cmp ra rb
or ra rb
and ra rb
xor ra rb
clr ra
tstz ra

mv ra rb
not ra rb
neg ra rb

bset ra bit
bclr ra bit
btst ra bit
lsl ra bit
lsr ra bit
asr ra bit
sx ra bit

EXAMPLE CODE:

  // COMMENT          (NOTE: Since we use CPP, we get C style comments for free)
  /* COMMENT */
  
// R0 = from ptr
// R1 = to ptr
// R0 = RTN number of bytes copied
.global strcpy
strcpy:            (NOTE: Labels cannot be on same line as an opcode)
    push r2
    \ mv r2 r0       (NOTE: '\' means this opcode combined with previous)
    push r3
    \ ld b r3 r0 ++1
strcpy_loop:
    testz r3
    \ st b r3 r1 ++1 
    br nz strcpy_loop
    \ ld b r3 r0 ++1 
strcpy_done:
    pop r3
    \ sub r0 r2
    pop r2 
    rtn  

// R0 = ptr
// R1 = ptr
// R0 = RTN 0 if same 
.global strcmp
strcmp:
    push r2
    \ push r3
    ld b r2 r0 ++1
    \ ld b r3 r1 ++1 
strcmp_loop:
    ld b r2 r0 ++1
    \ sub r3 r2 r3 
    br nz strcmp_not_equal
    \ testz r2
    br nz strcmp_loop
    \ ld b r3 r1 ++1 
strcmp_done:
    pop r2
    \ mvi r0 0
    pop r3
    rtn
strcmp_not_equal:
    pop r2
    \ mv r0 r3
    pop r3
    rtn

