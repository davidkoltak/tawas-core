
//
// Tawas Instruction Set Architecture (ISA)
//
// - Notes on instruction set and machine instruction binary format
//
// by
//   David M. Koltak  02/27/2016
//
// The MIT License (MIT)
// 
// Copyright (c) 2016 David M. Koltak
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 

00    [AU OP]    [AU_OP]    - Series AU Ops
01    [LS_OP]    [LS_OP]    - Series LS Ops
10    [LS_OP]    [AU_OP]    - Parallel LS/AU Ops
1100  [BR_OP]    [AU_OP]    - Parallel BR/AU Ops
1101  [BR_OP]    [LS_OP]    - Parallel BR/AU Ops
1110       [IMM_OP]         - Set Immediate MSB 28'bits
1111       [CALL_OP]        - Call/Jmp


AU Opcodes: 15-bits
------------------------------------------

0 iiiii aaa bbb ccc  : i.op b, a       (b = b *i* a)
1 aiiii aaa bbb ccc : i.op b, imm      (b = b *i* imm(a))

00 : Move     (a) -> b    (NOTE: 00 = "mv r0, r0", aka "nop")
01 : Inv      (~a) -> b
02 : Inc      (b + #a) -> b
03 : Dec      (b - #a) -> b
04 : lsl      (b << #a) -> b
05 : lsr      (b >> #a) -> b
06 : asr      (b >> #a) -> b
07 : sx       sign-extend(b, type(a)) -> b

08 : Add      (b + a) -> b
09 : Sub      (b - a) -> b
0A : And      (b & a) -> b
0B : Or       (b | a) -> b
0C : Xor      (b ^ a) -> b
0D :
0E :
0F :
  ...
1F :

  
  
LS Opcodes: 15-bits
------------------------------------------

00 tt iiiii ppp ddd  : Load  (type) p[i] -> d  (ld.t rx, p[i])
01 tt iiiii ppp ddd                            (ld.t rx, p++/--i)

10 tt iiiii ppp ddd  : Store (type) d -> p[i]  (st.t p[i], rx)
11 tt iiiii ppp ddd                            (st.t p++/--i, rx)

NOTE: Post-increment, Pre-decrement

 TYPE
 -----------
 00 : 8-bit
 01 : 16-bit
 1i : 32-bit (extended offset field)



BR Opcodes: 13-bits
------------------------------------------

0 cccc iiii iiii  : br.cc -128,127 words
1 iiii iiii iiii  : br -2048,2047 words



Call Opcodes: 28-bits
------------------------------------------

0000 eeeeeeee eeeeeeee eeeeeeee : jmp a (a->pc)
0001 eeeeeeee eeeeeeee eeeeeeee : jmpr r (pc+r->pc)
0010 xxxxxxxx xxxxxxxx xxxxxxxx ; jmp r7

0100 eeeeeeee eeeeeeee eeeeeeee : call a (pc->r7, ea->pc)
0101 eeeeeeee eeeeeeee eeeeeeee : callr r (pc->r7, pc+r->pc)
1110 eeeeeeee eeeeeeee eeeeeeee : call r7, ec (pc->r7, r7->pc, ec->r0)

1010 eeeeeeee eeeeeeee eeeeeeee : rtn (r7->pc, ec->r0)

---1 relative
--1- pc rtn (e or r7)
-1-- pc store (pc->r7)
1--- ec store (ec->r0)  "exit code"



strcmp:
  
