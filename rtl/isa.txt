
//
// Tawas Instruction Set Architecture (ISA)
//
// - Notes on instruction set and machine instruction binary format
//
// by
//   David M. Koltak  02/27/2016
//
// The MIT License (MIT)
// 
// Copyright (c) 2016 David M. Koltak
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 

Symetrical Dual-threaded (50% clocks each)
 - Hides IROM fetch latency and pipeline delays
 - Chose this over pipeline stalls because of better IPC
 - Chose this over branch delay slot because of easier programming
 - Reduced single thread performance, so need to keep both threads busy
 - Also provides natural TX/RX, Read/Write, or Consumer/Producer thread separation
 - Both threads share same IROM, but start at different offsets

Each thread has 8 x 32-bit registers: r6->link, r7->stack


32-bit instruction words formated as follows...
___________________________________________

00    [AU OP]    [AU_OP]    - Series AU Ops
01    [LS_OP]    [LS_OP]    - Series LS Ops
10    [LS_OP]    [AU_OP]    - Parallel LS/AU Ops
1100  [BR_OP]    [AU_OP]    - Parallel BR/AU Ops
1101  [BR_OP]    [LS_OP]    - Parallel BR/AU Ops
1110       [IMM_HOLD]       - Set Immediate Hold MSB 28'bits
11110      [IMM_LD]         - Load 24-bit signed exteded immediate to register
111110     [CALL_OP]        - Call/Jmp


AU Opcodes: 15-bits (triadic)
------------------------------------------

0 iiiii aaa bbb ccc  : i.op b, a       (c = a *i* b)
1 biiii aaa bbb ccc : i.op b, imm      (b = a *i* imm(b))

00 : Move     (b) -> c    (NOTE: 00 = "mv r0, r0", aka "nop")
01 : Inv      (~b) -> c
02 : Dec      (a - #b) -> c
03 : Inc      (a + #b) -> c
04 : lsl      (a << #b) -> c
05 : lsr      (a >> #b) -> c
06 : asr      (a >> #b) -> c
07 : sx       sign-extend(a, byte(b)) -> c

08 : Cmp      (a - b) -> c
09 : Add      (a + b) -> c
0A : Sub      (a - b) -> c
0B : And      (a & b) -> c
0G : Or       (a | b) -> c
0D : Xor      (a ^ b) -> c
0E :
0E :
  ...
1F :

  
LS Opcodes: 15-bits
------------------------------------------

00 tt iiiii ppp ddd  : Load  (type) p[i] -> d  (ld.t rx, p[i])
01 tt iiiii ppp ddd                            (ld.t rx, p++/--i)

10 tt iiiii ppp ddd  : Store (type) d -> p[i]  (st.t rx, p[i])
11 tt iiiii ppp ddd                            (st.t rx p++/--i)

 TYPE
 -----------
 00 : 8-bit
 01 : 16-bit
 1i : 32-bit (extended offset field)

NOTE: Post-increment, Pre-decrement

st.w r7--1, rx  == push rx
ld.w rx, r7++1  == pop rx


BR Opcodes: 13-bits
------------------------------------------

0 iiii iiii iiii  : br -2048,2047 words
1 xxxx 0000 0000  : rtn (pc->r6, r6->pc)
1 cccc iiii iiii  : br.cc -128,127 words

NOTE: rtn() saves pc back to r6, so it can be used
      as an indirect call/jmp

Imm Hold: 24-bits
------------------------------------------

eeeeeeee eeeeeeee eeeeeeee : 24-bits are placed in a holding register
                             for later use by AU Opcode 'imm' field

Imm Load: 27-bits
------------------------------------------

rrr eeeeeeee eeeeeeee eeeeeeee : Store signed extended 24-bit value
                                 into Rx
                                 

Call Opcodes: 26-bits
------------------------------------------

00 eeeeeeee eeeeeeee eeeeeeee : jmp a (e->pc)
01 eeeeeeee eeeeeeee eeeeeeee : call a (pc->r6, e->pc)
11 eeeeeeee eeeeeeee eeeeeeee : call a (push(r6), pc->r6, e->pc)
  


ASSEMBLY OPCODES
---------------------------

  call(label);
  icall(r6);
  rtn();
  
  nop();    // Single cycle NOP in one 32-bit word
  nop2();   // Two cycle NOP in one 32-bit word
  
  jmp(label);
  br(label);
  br(cond, label);
  
  ldi(rX, Imm24); // sign extended to 32-bits

  push(rX);
  st(b|h|w, rX, rY++/--#); // pre-dec, post-inc, # in type size
  st(b|h|w, rX, rY[#]);
  
  pop(rX);
  ld(b|h|w, rX, rY++/--#);
  ld(b|h|w, rX, rY[#]);
  
  mv(rX, rY);
  mv(rX, Imm32);
  
  inv(rX);
  inv(rX, rY);
  
  inc(rX, Imm3); // 1-8
  inc(rX, rY, Imm3);
  
  dec(rX, Imm3);
  dec(rX, rY, Imm3);
  
  lsl(rX, Imm3);
  lsl(rX, rY, Imm3);
  
  lsr(rX, Imm3);
  lsr(rX, rY, Imm3);
  
  asr(rX, Imm3);
  asr(rX, rY, Imm3);
  
  sx(rX, {1,2,3});
  sx(rX, rY, {1,2,3});
  
  cmp(rX, rY);
  
  Triadic Ops (t_op) = add, sub, and, or, xor
  --------------------------------------------
  t_op(rX);
  t_op(rX, rY);
  t_op(rX, rY, rZ);
  t_op(rX, Imm32);
  t_op(rX, rY, Imm32);
  
  
  Full Word Ops
  --------------
  call (optionally can include 'push(r6)')
  jmp
  ldi
  
  Parallel Ops (Execute in same clock cycle)
  ------------------------------------------
  call; push(r6);
  (br|rtn|icall); (mv|inv|inc|inc|dec|lsl|lsr|asr|sx|cmp|add|sub|and|or|xor);
  (br|rtn|icall); (ld|st|push|pop);
  (ld|st|push|pop); (mv|inv|inc|inc|dec|lsl|lsr|asr|sx|cmp|add|sub|and|or|xor);
  
  Serial Ops (Left instruction on first cycle, right instruction on second cycle)
  --------------------------------------------------------------------------------
  (mv|inv|inc|inc|dec|lsl|lsr|asr|sx|cmp|add|sub|and|or|xor); (mv|inv|inc|inc|dec|lsl|lsr|asr|sx|cmp|add|sub|and|or|xor);
  (ld|st|push|pop); (ld|st|push|pop);
  
